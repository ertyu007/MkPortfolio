import React, { useState, useEffect } from 'react';

const WelcomePopup = ({ onClose }) => {
  const [currentStep, setCurrentStep] = useState(0);
  const [isVisible, setIsVisible] = useState(false);

  useEffect(() => {
    // ‡πÄ‡∏û‡∏¥‡πà‡∏° animation ‡πÄ‡∏°‡∏∑‡πà‡∏≠ component ‡∏ñ‡∏π‡∏Å mount
    const timer = setTimeout(() => {
      setIsVisible(true);
    }, 100);
    return () => clearTimeout(timer);
  }, []);

  const steps = [
    {
      title: "‡∏¢‡∏¥‡∏ô‡∏î‡∏µ‡∏ï‡πâ‡∏≠‡∏ô‡∏£‡∏±‡∏ö‡∏™‡∏π‡πà‡πÄ‡∏ß‡πá‡∏ö‡∏û‡∏≠‡∏£‡πå‡∏ï‡πÇ‡∏ü‡∏•‡∏¥‡πÇ‡∏≠‡∏Ç‡∏≠‡∏á ‡∏ò‡∏ô‡∏†‡∏±‡∏ó‡∏£ ‡∏Å‡∏≤‡∏£‡∏∞‡∏à‡∏±‡∏Å‡∏©‡πå",
      content: "‡πÄ‡∏ß‡πá‡∏ö‡∏ô‡∏µ‡πâ‡∏ñ‡∏π‡∏Å‡∏≠‡∏≠‡∏Å‡πÅ‡∏ö‡∏ö‡∏°‡∏≤‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏á‡∏≤‡∏ô ‡∏ó‡∏±‡∏Å‡∏©‡∏∞ ‡πÅ‡∏•‡∏∞‡∏ö‡∏ó‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ç‡∏≠‡∏á‡∏ú‡∏° ‚Äî ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏á‡πà‡∏≤‡∏¢ ‚Äî ‡∏™‡∏ß‡∏¢‡∏á‡∏≤‡∏° ‚Äî ‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢ 100%",
      icon: "üëã"
    },
    {
      title: "‡∏ß‡∏¥‡∏ò‡∏µ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÄ‡∏ß‡πá‡∏ö",
      content: "‚Ä¢ ‡∏Å‡∏î‡∏ó‡∏µ‡πà‡∏õ‡∏∏‡πà‡∏° AI Assistant ‡∏°‡∏∏‡∏°‡∏•‡πà‡∏≤‡∏á‡∏Ç‡∏ß‡∏≤ ‚Äî ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ñ‡∏≤‡∏°‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Å‡∏±‡∏ö‡∏ú‡∏•‡∏á‡∏≤‡∏ô\n‚Ä¢ ‡πÉ‡∏ä‡πâ‡πÄ‡∏°‡∏ô‡∏π‡∏î‡πâ‡∏≤‡∏ô‡∏ö‡∏ô ‚Äî ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡∏™‡πà‡∏ß‡∏ô‡∏ï‡πà‡∏≤‡∏á ‡πÜ\n‚Ä¢ ‡∏Å‡∏î Like/Dislike ‚Äî ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ feedback ‡∏Å‡∏±‡∏ö‡∏ú‡∏•‡∏á‡∏≤‡∏ô",
      icon: "üí°"
    },
    {
      title: "‡∏ô‡πÇ‡∏¢‡∏ö‡∏≤‡∏¢‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏õ‡πá‡∏ô‡∏™‡πà‡∏ß‡∏ô‡∏ï‡∏±‡∏ß",
      content: "‚Ä¢ ‡πÄ‡∏ß‡πá‡∏ö‡∏ô‡∏µ‡πâ‡πÑ‡∏°‡πà‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡πà‡∏ß‡∏ô‡∏ï‡∏±‡∏ß‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì\n‚Ä¢ AI ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÉ‡∏ô‡πÄ‡∏ö‡∏£‡∏≤‡∏ß‡πå‡πÄ‡∏ã‡∏≠‡∏£‡πå‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì ‚Äî ‡πÑ‡∏°‡πà‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏≠‡∏≠‡∏Å\n‚Ä¢ ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Like/Dislike ‚Äî ‡πÄ‡∏Å‡πá‡∏ö‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏à‡∏≥‡∏ô‡∏ß‡∏ô ‚Äî ‡πÑ‡∏°‡πà‡πÄ‡∏Å‡πá‡∏ö‡∏ï‡∏±‡∏ß‡∏ï‡∏ô",
      icon: "üîí"
    }
  ];

  const handleNext = () => {
    if (currentStep < steps.length - 1) {
      setCurrentStep(currentStep + 1);
    } else {
      handleClose();
    }
  };

  const handleClose = () => {
    setIsVisible(false);
    // ‡∏£‡∏≠‡πÉ‡∏´‡πâ animation ‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô‡∏Å‡πà‡∏≠‡∏ô‡πÄ‡∏£‡∏µ‡∏¢‡∏Å onClose
    setTimeout(() => {
      onClose();
    }, 300);
  };

  const handleSkip = () => {
    handleClose();
  };

  return (
    <div className={`fixed inset-0 bg-black bg-opacity-50 z-50 flex items-center justify-center p-4 transition-opacity duration-300 ${isVisible ? 'opacity-100' : 'opacity-0 pointer-events-none'}`}>
      <div className={`bg-white dark:bg-gray-800 rounded-3xl p-1 sm:p-4 max-w-md w-full shadow-2xl backdrop-blur-xl border border-white/20 dark:border-gray-700/40 transform transition-all duration-300 ${isVisible ? 'scale-100 opacity-100' : 'scale-95 opacity-0'}`}>
        <div className="text-center mb-6">
          <div className="w-16 h-16 bg-gradient-to-r from-indigo-500 to-purple-600 rounded-full flex items-center justify-center mx-auto mb-4 text-2xl">
            {steps[currentStep].icon}
          </div>
          <h2 className="text-xl sm:text-2xl font-bold text-gray-900 dark:text-white mb-3">
            {steps[currentStep].title}
          </h2>
          <p className="text-gray-600 dark:text-gray-300 leading-relaxed whitespace-pre-line text-sm sm:text-base">
            {steps[currentStep].content}
          </p>
        </div>

        <div className="flex justify-between items-center mt-6">
          <div className="flex space-x-2">
            {steps.map((_, index) => (
              <div
                key={index}
                className={`w-2 h-2 sm:w-3 sm:h-3 rounded-full ${
                  index === currentStep ? 'bg-indigo-600' : 'bg-gray-300 dark:bg-gray-600'
                }`}
              />
            ))}
          </div>

          <div className="flex space-x-3">
            {currentStep > 0 && (
              <button
                onClick={() => setCurrentStep(currentStep - 1)}
                className="px-3 py-2 text-gray-600 dark:text-gray-300 hover:text-gray-800 dark:hover:text-white transition-colors text-sm"
              >
                ‡∏¢‡πâ‡∏≠‡∏ô‡∏Å‡∏•‡∏±‡∏ö
              </button>
            )}

            <button
              onClick={handleSkip}
              className="px-3 py-2 text-gray-400 hover:text-gray-600 dark:text-gray-500 dark:hover:text-gray-300 transition-colors text-sm"
            >
              ‡∏Ç‡πâ‡∏≤‡∏°
            </button>

            <button
              onClick={handleNext}
              className="px-4 py-2 bg-gradient-to-r from-indigo-600 to-purple-600 text-white rounded-full hover:from-indigo-700 hover:to-purple-700 transition-all duration-300 transform hover:scale-105 font-semibold text-sm"
            >
              {currentStep === steps.length - 1 ? '‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô' : '‡∏ñ‡∏±‡∏î‡πÑ‡∏õ'}
            </button>
          </div>
        </div>
      </div>
    </div>
  );
};

export default WelcomePopup;